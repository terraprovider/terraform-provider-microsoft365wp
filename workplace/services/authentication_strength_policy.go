package services

import (
	"terraform-provider-microsoft365wp/workplace/generic"
	"terraform-provider-microsoft365wp/workplace/wpschema/wpdefaultvalue"
	"terraform-provider-microsoft365wp/workplace/wpschema/wpplanmodifier"
	"terraform-provider-microsoft365wp/workplace/wpschema/wpvalidator"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var (
	AuthenticationStrengthPolicyResource = generic.GenericResource{
		TypeNameSuffix: "authentication_strength_policy",
		SpecificSchema: authenticationStrengthPolicyResourceSchema,
		AccessParams: generic.AccessParams{
			BaseUri:         "/policies/authenticationStrengthPolicies",
			WriteSubActions: authenticationStrengthPolicyWriteSubActions,
		},
	}

	AuthenticationStrengthPolicySingularDataSource = generic.CreateGenericDataSourceSingularFromResource(
		&AuthenticationStrengthPolicyResource)

	AuthenticationStrengthPolicyPluralDataSource = generic.CreateGenericDataSourcePluralFromSingular(
		&AuthenticationStrengthPolicySingularDataSource, "")
)

var authenticationStrengthPolicyWriteSubActions = []generic.WriteSubAction{
	&generic.WriteSubActionAllInOne{
		WriteSubActionBase: generic.WriteSubActionBase{
			Attributes: []string{"allowedCombinations"},
			UriSuffix:  "updateAllowedCombinations",
			UpdateOnly: true,
		},
	},
	// TBD: Will most likely not work with WriteSubActionIndividual since the id cannot be calculated externally (but will be randomly generated by MS Graph)
	// &generic.WriteSubActionIndividual{
	// 	WriteSubActionBase: generic.WriteSubActionBase{
	// 		Attributes: []string{"combinationConfigurations"},
	// 		UriSuffix:  "combinationConfigurations",
	// 	},
	// 	ComparisonKeyAttribute: "id",
	// 	// ComparisonKeyAttribute: "applies_to_combinations",
	// 	SetNestedPath:          tftypes.NewAttributePath().WithAttributeName("combination_configurations"),
	// 	// IdGetterFunc: func(ctx context.Context, diags *diag.Diagnostics, vRaw map[string]any, parentId string) string {
	// 	// 	return fmt.Sprintf("%s_%s", parentId, vRaw["locale"].(string))
	// 	// },
	// },
}

var authenticationStrengthPolicyResourceSchema = schema.Schema{
	Attributes: map[string]schema.Attribute{ // authenticationStrengthPolicy
		"id": schema.StringAttribute{
			Computed:      true,
			PlanModifiers: []planmodifier.String{wpplanmodifier.StringUseStateForUnknown()},
		},
		"allowed_combinations": schema.SetAttribute{
			ElementType: types.StringType,
			Required:    true,
			Validators: []validator.Set{
				setvalidator.ValueStringsAre(
					wpvalidator.FlagEnumValues("password", "voice", "hardwareOath", "softwareOath", "sms", "fido2", "windowsHelloForBusiness", "microsoftAuthenticatorPush", "deviceBasedPush", "temporaryAccessPassOneTime", "temporaryAccessPassMultiUse", "email", "x509CertificateSingleFactor", "x509CertificateMultiFactor", "federatedSingleFactor", "federatedMultiFactor", "unknownFutureValue"),
				),
			},
		},
		"created_date_time": schema.StringAttribute{
			Computed:      true,
			PlanModifiers: []planmodifier.String{wpplanmodifier.StringUseStateForUnknown()},
		},
		"description": schema.StringAttribute{
			Optional:      true,
			PlanModifiers: []planmodifier.String{wpdefaultvalue.StringDefaultValue("")},
			Computed:      true,
		},
		"display_name": schema.StringAttribute{
			Required: true,
		},
		"modified_date_time": schema.StringAttribute{
			Computed:      true,
			PlanModifiers: []planmodifier.String{wpplanmodifier.StringUseStateForUnknown()},
		},
		"policy_type": schema.StringAttribute{
			Computed: true,
			Validators: []validator.String{
				stringvalidator.OneOf("builtIn", "custom", "unknownFutureValue"),
			},
			PlanModifiers: []planmodifier.String{wpplanmodifier.StringUseStateForUnknown()},
		},
		"requirements_satisfied": schema.StringAttribute{
			Computed: true,
			Validators: []validator.String{
				wpvalidator.FlagEnumValues("none", "mfa", "unknownFutureValue"),
			},
			PlanModifiers: []planmodifier.String{wpplanmodifier.StringUseStateForUnknown()},
		},
	},
	MarkdownDescription: `https://learn.microsoft.com/en-us/graph/api/resources/authenticationStrengthPolicy?view=graph-rest-beta`,
}
